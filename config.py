# ────────────────────────────────────────────────────────────────

# ✅ THIS PROJECT IS DEVELOPED AND MAINTAINED BY @trinityXmods (TELEGRAM)
# 🚫 DO NOT REMOVE OR ALTER THIS CREDIT LINE UNDER ANY CIRCUMSTANCES.

# ⭐ FOR MORE HIGH-QUALITY OPEN-SOURCE BOTS, FOLLOW US ON GITHUB.
# 🔗 OFFICIAL GITHUB: https://github.com/Trinity-Mods
# 📩 NEED HELP OR HAVE QUESTIONS? REACH OUT VIA TELEGRAM: @velvetexams

# ────────────────────────────────────────────────────────────────

from operator import add
import os
import logging
from logging.handlers import RotatingFileHandler

# Specify the Telegram channel or group ID that users must join (force-subscribe) before using the bot.
FORCE_SUB_CHANNEL = int(os.environ.get("FORCE_SUB_CHANNEL", "-1002841082687"))
FORCE_SUB_CHANNEL2 = int(os.environ.get("FORCE_SUB_CHANNEL2", "-1001592448284"))
FORCE_SUB_CHANNEL3 = int(os.environ.get("FORCE_SUB_CHANNEL3", "-1001898749693"))
FORCE_SUB_CHANNEL4 = int(os.environ.get("FORCE_SUB_CHANNEL4", "-1002037843175"))


# Display the Bot's Uptime
BOT_STATS_TEXT = os.environ.get("BOTS_STATS_TEXT","<b>BOT UPTIME </b>\n{uptime}")
# Default reply sent to users when they message the bot directly.
USER_REPLY_TEXT = os.environ.get("USER_REPLY_TEXT", "Hi, I am hosted by @xspes")

# Paste your bot token here (get it from https://t.me/BotFather)
TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN", "") 
# Provide the API ID associated with your Telegram application (from https://my.telegram.org/apps)
APP_ID = int(os.environ.get("APP_ID", ""))
# Provide the API Hash linked to your Telegram application (available at https://my.telegram.org/apps)
API_HASH = os.environ.get("API_HASH", "")
# Enter the channel ID of the database channel where all files will be stored.
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "-1002841082687"))
# Enter your personal Telegram user ID (you can get it by sending '/id' to https://t.me/MissRose_bot).
OWNER_ID = int(os.environ.get("OWNER_ID", "6318135266"))
#port set to default 8080, change according to your will.
PORT = os.environ.get("PORT", "8080")
# Enter your MongoDB connection URL. You can use a free cloud database from MongoDB Atlas.
DB_URL = os.environ.get("DB_URL", "")
# Enter the name of your MongoDB database.
DB_NAME = os.environ.get("DB_NAME", "")

# Set the number of worker threads for the bot. To avoid sleeping issues and improve performance, keep it above 50 (recommended).
TG_BOT_WORKERS = int(os.environ.get("TG_BOT_WORKERS", "50"))
# Message displayed to users when they click the Start button or send the /start command.
START_MSG = os.environ.get("START_MESSAGE", "ʜᴇʟʟᴏ ᴛʜᴇʀᴇ {mention}!!🌚\n\nɪ ᴀᴍ ᴅᴇꜱɪɢɴᴇᴅ ᴛᴏ ꜱʜᴀʀᴇ ꜰɪʟᴇꜱ ᴛʜʀᴏᴜɢʜ ꜱᴘᴇᴄɪᴀʟ ʟɪɴᴋꜱ!! 🪄\n\nɪ ᴡᴏʀᴋ ᴡɪᴛʜɪɴ ɪɴꜰᴏʜᴜʙ ɴᴇᴛᴡᴏʀᴋꜱ ᴏɴʟʏ ᴀɴᴅ ʏᴏᴜ ᴀʀᴇ ᴡᴇʟᴄᴏᴍᴇ ᴛᴏ ᴜꜱᴇ ᴍᴇ! 🎀")
# Enter your Telegram username (without @). A public username is required to use this bot.
OWNER_TAG = os.environ.get("OWNER_TAG", "xspes")
# Time (in seconds) after which messages will be auto-deleted. Use 0 to keep messages permanently.
TIME = int(os.environ.get("TIME", "600"))

# Toggle this feature by setting the value inside to either True (on) or False (off).
# TRUE for yes FALSE if no

# Do you want to enable shortner in this bot? Set to TRUE for yes, False for no.
USE_SHORTLINK = True if os.environ.get('USE_SHORTLINK', "False") == "TRUE" else False 
# Enter the base URL of the shortlink service (without https://).
SHORTLINK_API_URL = os.environ.get("SHORTLINK_API_URL", "gplinks.com")
# Enter the API key provided by your chosen shortner service.
SHORTLINK_API_KEY = os.environ.get("SHORTLINK_API_KEY", "")
# Set a custom expiration time (in seconds) for the shortlink.
# Example: 24 hours = 86400, 12 hours = 43200
# This method is useful only if U_S_E_P or rather the token verification system is enabled in the bot.
VERIFY_EXPIRE = int(os.environ.get('VERIFY_EXPIRE', "43200")) # Add time in seconds
# Enable to apply shortner to every link generated by the bot (set to TRUE).
U_S_E_P = True if (True if os.environ.get('U_S_E_P', "TRUE") == "TRUE" else False) and (USE_SHORTLINK) else False
# Provide a tutorial video URL to guide users on how to download via your shortlink.
TUT_VID = os.environ.get("TUT_VID","https://t.me/infohub_updates/34")

# Enable payment system to allow users to remove token limits or purchase premium features.
# Set to TRUE to activate payments in the bot and earn money.
USE_PAYMENT = True if (True if os.environ.get("USE_PAYMENT", "TRUE") == "TRUE" else False) and (USE_SHORTLINK) else False
# Enter your UPI ID for receiving payments.
UPI_ID = os.environ.get("UPI_ID", "sendrajbooks@fam")
# Enter the direct image URL of your UPI QR code (used for payment).
UPI_IMAGE_URL = os.environ.get("UPI_IMAGE_URL", "https://envs.sh/Vpg.jpg")
#No need to change anything here.
SCREENSHOT_URL = os.environ.get("SCREENSHOT_URL", f"t.me/{OWNER_TAG}")
# Define subscription durations and their respective prices:
# Duration: 7 Days
# Only change the prices and currency, nothing else.
PRICE1 = os.environ.get("PRICE1", "₹20")

# Duration: 1 Month
PRICE2 = os.environ.get("PRICE2", "₹50")

# Duration: 3 Months
PRICE3 = os.environ.get("PRICE3", "₹80")

# Duration: 6 Months
PRICE4 = os.environ.get("PRICE4", "₹150")

# Duration: 1 Year
PRICE5 = os.environ.get("PRICE5", "₹285")


# Message shown to users when they are required to join a channel or group (force subscription prompt).
FORCE_MSG = os.environ.get("FORCE_MSG", "ʜᴇʟʟᴏ ᴛʜᴇʀᴇ {mention}!!👋\n\n<b>ɪɴ ᴏʀᴅᴇʀ ᴛᴏ ɢᴇᴛ ᴛʜᴇ ꜰɪʟᴇꜱ, ʏᴏᴜ ᴀʀᴇ ʀᴇQᴜᴇꜱᴛᴇᴅ ᴛᴏ ꜱᴜᴘᴘᴏʀᴛ ᴜꜱ ʙʏ ᴊᴏɪɴɪɴɢ ᴛʜᴇ ᴄʜᴀɴɴᴇʟꜱ ᴀɴᴅ ɢʀᴏᴜᴘꜱ ɢɪᴠᴇɴ ʙᴇʟᴏᴡ:</b>")
# Enter a custom caption that will be auto-attached to files shared by the bot.
CUSTOM_CAPTION = os.environ.get("CUSTOM_CAPTION", "Bot is hosted by :\n\n<b>xspes</b>\n\nGithub: https://github.com/yuIlariy\nTelegram: https://t.me/xspes")
# Protect content from being forwarded or saved. Set to TRUE to enable, FALSE to disable (recommended: FALSE).
PROTECT_CONTENT = True if os.environ.get("PROTECT_CONTENT", "FALSE") == "TRUE" else False
# Use this option if you do not want buttons to appear on posts in the database channel.  
# Set to TRUE to disable buttons, False to keep them.
DISABLE_CHANNEL_BUTTON = True if os.environ.get("DISABLE_CHANNEL_BUTTON", "False") == "TRUE" else False

# Add the Telegram user IDs of the bot admins. Separate multiple IDs with a space.  
# Example: 6011680723 1234567890
try:
    ADMINS=[]
    for x in (os.environ.get("ADMINS", "6318135266").split()):
        ADMINS.append(int(x))
except ValueError:
        raise Exception("Your Admins list does not contain valid integers.")

# No modifications are required beyond this point. Proceed only if you know what you're doing.

ADMINS.append(OWNER_ID)


LOG_FILE_NAME = "logs.txt"
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s - %(levelname)s] - %(name)s - %(message)s",
    datefmt='%d-%b-%y %H:%M:%S',
    handlers=[
        RotatingFileHandler(
            LOG_FILE_NAME,
            maxBytes=50000000,
            backupCount=10
        ),
        logging.StreamHandler()
    ]
)
logging.getLogger("pyrogram").setLevel(logging.WARNING)
def LOGGER(name: str) -> logging.Logger:
    return logging.getLogger(name)

# ────────────────────────────────────────────────────────────────

# ✅ THIS PROJECT IS DEVELOPED AND MAINTAINED BY @trinityXmods (TELEGRAM)
# 🚫 DO NOT REMOVE OR ALTER THIS CREDIT LINE UNDER ANY CIRCUMSTANCES.

# ⭐ FOR MORE HIGH-QUALITY OPEN-SOURCE BOTS, FOLLOW US ON GITHUB.
# 🔗 OFFICIAL GITHUB: https://github.com/Trinity-Mods
# 📩 NEED HELP OR HAVE QUESTIONS? REACH OUT VIA TELEGRAM: @velvetexams

# ────────────────────────────────────────────────────────────────
